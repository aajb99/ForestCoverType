
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ####### Load Libraries #######
> #install.packages('tidyverse')
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> #install.packages('tidymodels')
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages
> #install.packages('DataExplorer')
> #install.packages("poissonreg")
> # library(poissonreg)
> #install.packages("glmnet")
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-8
> #library(patchwork)
> # install.packages("rpart")
> #install.packages('ranger')
> library(ranger)
> #install.packages('stacks')
> library(stacks)
> #install.packages('vroom')
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> #install.packages('parsnip')
> library(parsnip)
> # install.packages('dbarts')
> # library(dbarts)
> #install.packages('embed')
> library(embed)
> library(themis)
> library(ggplot2)
> library(parsnip)
> library(bonsai)
> library(lightgbm)
Loading required package: R6

Attaching package: ‘lightgbm’

The following object is masked from ‘package:dplyr’:

    slice

> library(keras)

Attaching package: ‘keras’

The following object is masked from ‘package:yardstick’:

    get_weights

> install.packages('baguette')
Installing package into ‘/home/abrown52/R/x86_64-pc-linux-gnu-library/4.3’
(as ‘lib’ is unspecified)
trying URL 'https://cloud.r-project.org/src/contrib/baguette_1.0.1.tar.gz'
Content type 'application/x-gzip' length 53184 bytes (51 KB)
==================================================
downloaded 51 KB

* installing *source* package ‘baguette’ ...
** package ‘baguette’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (baguette)

The downloaded source packages are in
	‘/tmp/RtmpxrxTEs/downloaded_packages’
> library(baguette)
> install.packages('stacks')
Installing package into ‘/home/abrown52/R/x86_64-pc-linux-gnu-library/4.3’
(as ‘lib’ is unspecified)
trying URL 'https://cloud.r-project.org/src/contrib/stacks_1.0.3.tar.gz'
Content type 'application/x-gzip' length 2504004 bytes (2.4 MB)
==================================================
downloaded 2.4 MB

* installing *source* package ‘stacks’ ...
** package ‘stacks’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (stacks)

The downloaded source packages are in
	‘/tmp/RtmpxrxTEs/downloaded_packages’
> library(stacks)
> ##############################
> 
> # Import Dataset:
> data_train <- vroom("./data/train.csv") %>%
+   mutate(Cover_Type=factor(Cover_Type))# grab training data
Rows: 15120 Columns: 56
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (56): Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Ve...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> data_test <- vroom("./data/test.csv") # grab testing data
Rows: 565892 Columns: 55
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (55): Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Ve...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # data_train
> 
> ################################################################################
> # Recipe/Bake
> 
> rFormula <- Cover_Type ~ .
> 
> # fct_recipe <- recipe(Cover_Type ~ ., data = data_train) %>%
> #   update_role(Id, new_role = "Id") %>%
> #   # step_mutate_at(c(12:55), fn = factor) %>%
> #   step_nzv(freq_cut = 15070/50) %>%
> #   step_zv(all_predictors()) %>%
> #   step_lencode_glm(all_nominal_predictors(), outcome = vars(Cover_Type)) #%>%
> #   #step_normalize(all_numeric_predictors())
> 
> # fct_recipe <- recipe(Cover_Type ~ ., data = data_train) %>%
> #   update_role(Id, new_role = "Id") %>%
> #   step_mutate(Id = factor(Id)) %>%
> #   step_mutate_at(all_outcomes(), fn = factor, skip = TRUE) %>%
> #   step_zv(all_predictors()) #%>%
> #   #step_lencode_glm(all_nominal_predictors(), outcome = vars(Cover_Type))
> 
> fct_recipe <- recipe(rFormula, data = data_train) %>%
+   step_zv(all_predictors()) %>%
+   step_normalize(all_numeric_predictors())
> 
> prepped_recipe <- prep(fct_recipe) # preprocessing new data
> baked_data <- bake(prepped_recipe, new_data = data_train)
> 
> 
> ################################################################################
> ########################
> ##### Stacked mods #####
> ########################
> 
> untuned_model <- control_stack_grid()
> tuned_model <- control_stack_resamples()
> 
> folds <- vfold_cv(data_train, v = 5, repeats = 1)
> 
> 
> # Model 1: Classification RF
> 
> class_rf_mod <- rand_forest(mtry = tune(),
+                             min_n = tune(),
+                             trees = 500) %>% #Type of model
+   set_engine('ranger') %>%
+   set_mode('classification')
> 
> rf_pretune_wf <- workflow() %>%
+   add_recipe(fct_recipe) %>%
+   add_model(class_rf_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(mtry(range = c(2,ncol(data_train)-1)),
+                             min_n(),
+                             levels = 3) ## L^2 total tuning possibilities
> 
> # Run CV
> rf_final_mod <- rf_pretune_wf %>%
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
→ A | warning: 55 columns were requested but there were 51 predictors in the data. 51 will be used.
There were issues with some computations   A: x1
There were issues with some computations   A: x2
There were issues with some computations   A: x3
→ B | warning: 55 columns were requested but there were 53 predictors in the data. 53 will be used.
There were issues with some computations   A: x3There were issues with some computations   A: x3   B: x1
There were issues with some computations   A: x3   B: x2
There were issues with some computations   A: x3   B: x3
There were issues with some computations   A: x3   B: x4
There were issues with some computations   A: x3   B: x5
There were issues with some computations   A: x3   B: x6
There were issues with some computations   A: x3   B: x7
There were issues with some computations   A: x3   B: x8
There were issues with some computations   A: x3   B: x9
There were issues with some computations   A: x3   B: x10
There were issues with some computations   A: x3   B: x11
There were issues with some computations   A: x3   B: x12
There were issues with some computations   A: x3   B: x12

> 
> bestTune <- rf_final_mod %>%
+   select_best('roc_auc')
> 
> rf_results1 <- rf_pretune_wf %>%
+   finalize_workflow(bestTune) %>%
+   fit(data = data_train)
> 
> 
> # Model 2: xg boost
> 
> xgboost_recipe <- recipe(rFormula, data = data_train) %>%
+   step_zv(all_predictors()) %>%
+   step_normalize(all_numeric_predictors())
> 
> boost_model <- boost_tree(trees = 500,
+                           tree_depth = 8,
+                           learn_rate = .2
+ ) %>%
+   set_engine("xgboost") %>% #or "xgboost" but lightgbm is faster
+   set_mode("classification")
> 
> boost_wf <- workflow() %>%
+   add_recipe(xgboost_recipe) %>%
+   add_model(boost_model)
> 
> # Run CV
> # tuned_boost <- boost_wf %>%
> #   tune_grid(resamples = folds,
> #             grid = boost_tuneGrid,
> #             metrics = metric_set(accuracy))
> # 
> # bestTune <- tuned_boost %>%
> #   select_best('accuracy')
> 
> boost_results1 <- fit_resamples(boost_wf,
+                           resamples = folds,
+                           metrics = metric_set(roc_auc),
+                           control = tuned_model)
